version: '3.7'

networks:
  gonggong-ai-network:
    driver: bridge

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    hostname: zookeeper
    user: root
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - "./volumes/zookeeper/data:/bitnami/zookeeper/data"
      - "./volumes/zookeeper/log:/bitnami/zookeeper/log"
    networks:
      - gonggong-ai-network

  kafka-broker-1:
    image: bitnami/kafka:latest
    hostname: kafka-broker-1
    user: root
    ports:
      - "19092:19092"
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,LISTENER_LOCAL://0.0.0.0:19092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://3.38.213.181:9092,LISTENER_LOCAL://3.38.213.181:19092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_COMPRESSION_TYPE=producer
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
    volumes:
      - "./volumes/kafka/broker-1:/bitnami/kafka"
    networks:
      - gonggong-ai-network

  kafka-broker-2:
    image: bitnami/kafka:latest
    hostname: kafka-broker-2
    user: root
    ports:
      - "29092:29092"
      - "9093:9092"
    environment:
      - KAFKA_BROKER_ID=2
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,LISTENER_LOCAL://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://3.38.213.181:9093,LISTENER_LOCAL://3.38.213.181:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,LISTENER_LOCAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_COMPRESSION_TYPE=producer
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
    volumes:
      - "./volumes/kafka/broker-2:/bitnami/kafka"
    networks:
      - gonggong-ai-network

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    user: root
    ports:
      - "8081:8081"
    environment:
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=PLAINTEXT://kafka-broker-1:9092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
    depends_on:
      - kafka-broker-1
      - kafka-broker-2
    networks:
      - gonggong-ai-network

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    hostname: schema-registry-ui
    user: root
    ports:
      - "8000:8000"
    environment:
      - SCHEMAREGISTRY_URL=http://3.38.213.181:8081
    depends_on:
      - schema-registry
    networks:
      - gonggong-ai-network

  kafka-manager:
    image: sheepkiller/kafka-manager:latest
    user: root
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: "zookeeper:2181"
    networks:
      - gonggong-ai-network

  init-kafka:
    image: bitnami/kafka:latest
    user: root
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # block until kafka is reachable
      kafka-topics.sh --bootstrap-server 3.38.213.181:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server 3.38.213.181:9092 --create --if-not-exists --topic attempt-analysis-request --replication-factor 2 --partitions 2
      kafka-topics.sh --bootstrap-server 3.38.213.181:9092 --create --if-not-exists --topic attempt-analysis-response --replication-factor 2 --partitions 2
      kafka-topics.sh --bootstrap-server 3.38.213.181:9092 --create --if-not-exists --topic like-add-request --replication-factor 2 --partitions 2
      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server 3.38.213.181:9092 --list
      "
    networks:
      - gonggong-ai-network
